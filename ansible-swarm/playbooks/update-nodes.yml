- name: Update of Docker Swarm nodes
  hosts: swarm_cluster
  become: yes
  serial: 1
  tasks:
    - name: Get Swarm node name
      command: docker info --format '{{ "{{.Name}}" }}'
      register: swarm_node_name

    - name: Set swarm node name as fact
      set_fact:
        node_name_for_swarm: "{{ swarm_node_name.stdout }}"

    - name: Drain node from the swarm
      shell: docker node update --availability drain {{ hostvars[inventory_hostname].node_name_for_swarm }}
      delegate_to: "{{ groups['swarm_managers'][0] }}"
      when: inventory_hostname != groups['swarm_managers'][0]

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Upgrade all packages
      apt:
        upgrade: dist
        autoremove: yes
        autoclean: yes

    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required

    - name: Reboot the machine if needed
      reboot:
        msg: "Reboot after system upgrade"
        reboot_timeout: 600
      when: reboot_required.stat.exists

    - name: Wait for node to come back
      wait_for_connection:
        timeout: 300

    - name: GlusterFS Check
      become: yes
      mount:
        path: /mnt
        src: localhost:/staging-gfs
        fstype: glusterfs
        opts: defaults,_netdev,backupvolfile-server=localhost
        state: mounted

    - name: Reactivate node in the swarm
      shell: docker node update --availability active {{ hostvars[inventory_hostname].node_name_for_swarm }}
      delegate_to: "{{ groups['swarm_managers'][0] }}"
      when: inventory_hostname != groups['swarm_managers'][0]
